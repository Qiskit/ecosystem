name: Project check workflow

on:
  #  Payload:
  #  "client_payload": {
  #    "tier": "COMMUNITY", # 'Tier of project'
  #    "branch_name": "weekly-checks-1", # 'Branch name to push changes'
  #    "issue_id": 49, # 'Id of issue to put comments in'
  #    "repo_url": "https://github.com/IceKhan13/demo-implementation" # 'Repository URL'
  #  }
  repository_dispatch:
    types: [ check_project ]

jobs:
  project_check_job:
    runs-on: ubuntu-latest
    steps:
    - name: Setup variables
      id: vars
      run: |
        echo "Running check for ${{ github.event.client_payload.repo_url }}..."
        echo "Will be commenting in ${{ github.event.client_payload.issue_id }}..."
        echo "Will push changes to ${{ github.event.client_payload.branch_name }}..."
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.branch_name }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
          python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Standard tests
      uses: ./.github/actions/run-tests
      with:
        repo_url: ${{ github.event.client_payload.repo_url }}
        check_type: "test_standard"
        tox_env: "py39"
        tier: ${{ github.event.client_payload.tier }}

    - name: Stable tests
      uses: ./.github/actions/run-tests
      with:
        repo_url: ${{ github.event.client_payload.repo_url }}
        check_type: "test_stable"
        tox_env: "py39"
        tier: ${{ github.event.client_payload.tier }}

    - name: Dev tests
      uses: ./.github/actions/run-tests
      with:
        repo_url: ${{ github.event.client_payload.repo_url }}
        check_type: "test_dev"
        tox_env: "py39"
        tier: ${{ github.event.client_payload.tier }}

    - name: Styles check
      uses: ./.github/actions/run-tests
      with:
        repo_url: ${{ github.event.client_payload.repo_url }}
        check_type: "lint"
        tox_env: "py39"
        tier: ${{ github.event.client_payload.tier }}

    - name: Coverage check
      uses: ./.github/actions/run-tests
      with:
        repo_url: ${{ github.event.client_payload.repo_url }}
        check_type: "coverage"
        tox_env: "py39"
        tier: ${{ github.event.client_payload.tier }}

    - name: Commit changes
      run: |
        git pull --rebase --autostash
        git add ecosystem/resources/members.json
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -m "Tests for ${{ github.event.client_payload.repo_url }}" --allow-empty
        git push

    # check if any of the tests failed
    - name: Check return
      run: |
        echo "PASS_LOG=True" >> $GITHUB_ENV

        declare -a return_list=( \
          "${{ steps.linter.outputs.result }}" \
          "${{ steps.coverage.outputs.result }}" \
          "${{ steps.stable.outputs.result }}" \
          "${{ steps.dev.outputs.result }}" \
        )
        for i in "${return_list[@]}"; do
          if [[ "${i}" != *"True"* ]]; then
            echo "PASS_LOG=False" >> $GITHUB_ENV
          fi
        done

    - name: Check the check
      id: check_result
      run: |
        echo "Pass log is ${{ env.PASS_LOG }}"

    - name: Create comment on failure
      if: ${{ env.PASS_LOG == 'False' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        repository: "qiskit-community/ecosystem"
        issue-number: ${{ github.event.issue.number }}
        body: |
          Failed project check ${{ github.event.client_payload.repo_url }} :warning:
          Error see: https://github.com/qiskit-community/ecosystem/actions/runs/${{ github.run_id }}

          ### Checks Status ###
          Linter : ${{ steps.linter.outputs.result }}
          Coverage : ${{ steps.coverage.outputs.result }}
          Qiskit Stable : ${{ steps.stable.outputs.result }}
          Qiskit Dev : ${{ steps.dev.outputs.result }}

          ### Logs ###
          <details>
          <summary>Linter</summary>

          #### Error logs
          ${{ steps.linter.outputs.error }}

          #### Failed logs
          ${{ steps.linter.outputs.fail }}
          </details>
          <details>
          <summary>Coverage</summary>

          #### Error logs
          ${{ steps.coverage.outputs.error }}

          #### Failed logs
          ${{ steps.coverage.outputs.fail }}
          </details>
          <details>
          <summary>Qiskit Stable</summary>

          #### Error logs
          ${{ steps.stable.outputs.error }}

          #### Failed logs
          ${{ steps.stable.outputs.fail }}
          </details>
          <details>
          <summary>Qiskit Dev</summary>

          #### Error logs
          ${{ steps.dev.outputs.error }}

          #### Failed logs
          ${{ steps.dev.outputs.fail }}
          </details>
