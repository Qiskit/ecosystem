name: Test repository
# Clone repository and run `tox -epy39`, optionally force-installing a
# different version of Qiskit

on:
  workflow_call:
    inputs:
      repo_name:
        description: "GitHub repository owner-name/repo-name"
        type: string
        required: true
      test_type:
        description: "'standard', 'stable', or 'dev'"
        type: string
        required: true

  workflow_dispatch:
    inputs:
      repo_name:
        description: "GitHub repository owner-name/repo-name"
        type: string
        required: true
      test_type:
        description: "Type of test to run"
        required: true 
        default: 'standard'
        type: choice
        options:
          - standard
          - stable
          - development

jobs:
  run_tests:
    name: Test ${{ inputs.repo_name }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo_name }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up standard environment
        id: set-up-env
        run: |
          # Create the tox environment using the package versions specified in
          # the repo. This means any later force-installs take precedence.
          if [ ! -e tox.ini ]; then echo "No tox.ini" && exit 1; fi
          echo "PASS=false" >> $GITHUB_ENV
          pip install tox tox-DEBIAN
          tox -epy39 --notest  # Create tox environment

      - name: Force install latest Qiskit
        continue-on-error: true
        if: ${{ inputs.test_type == 'stable' }}
        run: |
          tox exec -epy39 -- pip uninstall -y qiskit
          tox exec -epy39 -- pip install --upgrade qiskit --force-reinstall

      - name: Force install development Qiskit
        continue-on-error: true
        if: ${{ inputs.test_type == 'development' }}
        run: |
          tox exec -epy39 -- pip uninstall -y qiskit
          QISKIT_COMMIT_HASH=$(git ls-remote https://github.com/Qiskit/qiskit refs/heads/main | cut -f 1)
          echo "QISKIT_COMMIT_HASH=$QISKIT_COMMIT_HASH" >> $GITHUB_ENV
          tox exec -epy39 -- pip install git+https://github.com/Qiskit/qiskit@"$QISKIT_COMMIT_HASH" --force-reinstall
          
      - name: Run tests
        continue-on-error: true
        run: |
          tox -epy39
          echo "PASS=true" >> $GITHUB_ENV
          # TODO: Find a cleaner way to get qiskit version
          QISKIT_VERSION=$(tox exec -epy39 -- python -c 'import qiskit; print(qiskit.__version__)' | awk "NR==2")
          echo "QISKIT_VERSION=$QISKIT_VERSION" >> $GITHUB_ENV

      - name: Compile results
        # We upload a JSON artifact so the calling job can read the results.
        # This is a bit ugly, but there doesn't seem to be a better way of doing it.
        # See https://github.com/orgs/community/discussions/17245 for details.
        run: |
          LOGS_LINK=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JSON_CONTENT="{
            \"passed\": \"${{ env.PASS }}\",
            \"test_type\": \"${{ inputs.test_type }}\",
            \"package\": \"qiskit\",
            \"package_version\": \"${{ env.QISKIT_VERSION }}\",
            \"package_commit_hash\": \"${{ env.QISKIT_COMMIT_HASH }}\",
            \"logs_link\": \"$LOGS_LINK\"
          }"
          echo "$JSON_CONTENT"
          echo "$JSON_CONTENT" > "${{ inputs.test_type }}.json"
          
          ARTIFACT_NAME=$(basename ${{ inputs.repo_name }})--${{ inputs.test_type }}
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload results artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: ${{ inputs.test_type }}.json
